int helper(vector<int>&num,int x,int index){
    if(index==0){
        if(x%num[0]==0) return x/num[0];
        return 1e9;
    }
    int nottake=helper(num,x,index-1);
    int take=1e9;
    if(x>=num[index]){
        take=1+helper(num,x-num[index],index);
    }
    return min(nottake,take);
}
int minimumElements(vector<int> &num, int x)
{
    // Write your code here.
    int n=num.size();
    vector<vector<int>>dp(n,vector<int>(x+1,0));
    for(int i=0;i<=x;i++) {
        if(i%num[0]==0) dp[0][i]=i/num[0];
        else dp[0][i]=1e9; 
    }
        for(int i=1;i<n;i++){
          for(int j=0;j<=x;j++){
                 int nottake=dp[i-1][j];
                 int take=INT_MAX;
                 if(num[i]<=j){
                        take=1+dp[i][j-num[i]]; //infinite supply of coins it is
                  }
                  dp[i][j]=min(nottake,take);
            }
        }                  
    int ans= dp[n-1][x];
    if(ans>=1e9) return -1;
    return ans;
                       
     //     int ans=helper(num,x,n);
//     if(ans>=1e9) return -1;
//     return ans;
    
}